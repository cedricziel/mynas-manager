// Mocks generated by Mockito 5.4.6 from annotations
// in mynas_backend/test/rpc/hybrid_websocket_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:async/async.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:mynas_backend/services/session_manager.dart' as _i5;
import 'package:stream_channel/stream_channel.dart' as _i3;
import 'package:truenas_client/src/models.dart' as _i10;
import 'package:truenas_client/src/models/connection_status.dart' as _i9;
import 'package:truenas_client/truenas_client.dart' as _i7;
import 'package:web_socket_channel/src/channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketSink_0 extends _i1.SmartFake implements _i2.WebSocketSink {
  _FakeWebSocketSink_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamChannel_1<T> extends _i1.SmartFake
    implements _i3.StreamChannel<T> {
  _FakeStreamChannel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserSession_4 extends _i1.SmartFake implements _i5.UserSession {
  _FakeUserSession_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WebSocketChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketChannel extends _i1.Mock implements _i2.WebSocketChannel {
  MockWebSocketChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> get ready =>
      (super.noSuchMethod(
            Invocation.getter(#ready),
            returnValue: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.WebSocketSink get sink =>
      (super.noSuchMethod(
            Invocation.getter(#sink),
            returnValue: _FakeWebSocketSink_0(this, Invocation.getter(#sink)),
          )
          as _i2.WebSocketSink);

  @override
  _i4.Stream<dynamic> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<dynamic>.empty(),
          )
          as _i4.Stream<dynamic>);

  @override
  void pipe(_i3.StreamChannel<dynamic>? other) => super.noSuchMethod(
    Invocation.method(#pipe, [other]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.StreamChannel<S> transform<S>(
    _i3.StreamChannelTransformer<S, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [transformer]),
            returnValue: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#transform, [transformer]),
            ),
          )
          as _i3.StreamChannel<S>);

  @override
  _i3.StreamChannel<dynamic> transformStream(
    _i4.StreamTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformStream, [transformer]),
            returnValue: _FakeStreamChannel_1<dynamic>(
              this,
              Invocation.method(#transformStream, [transformer]),
            ),
          )
          as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> transformSink(
    _i6.StreamSinkTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformSink, [transformer]),
            returnValue: _FakeStreamChannel_1<dynamic>(
              this,
              Invocation.method(#transformSink, [transformer]),
            ),
          )
          as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> changeStream(
    _i4.Stream<dynamic> Function(_i4.Stream<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeStream, [change]),
            returnValue: _FakeStreamChannel_1<dynamic>(
              this,
              Invocation.method(#changeStream, [change]),
            ),
          )
          as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> changeSink(
    _i4.StreamSink<dynamic> Function(_i4.StreamSink<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeSink, [change]),
            returnValue: _FakeStreamChannel_1<dynamic>(
              this,
              Invocation.method(#changeSink, [change]),
            ),
          )
          as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<S> cast<S>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _FakeStreamChannel_1<S>(
              this,
              Invocation.method(#cast, []),
            ),
          )
          as _i3.StreamChannel<S>);
}

/// A class which mocks [ITrueNasClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockITrueNasClient extends _i1.Mock implements _i7.ITrueNasClient {
  MockITrueNasClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> connect() =>
      (super.noSuchMethod(
            Invocation.method(#connect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<T> call<T>(String? method, [List<dynamic>? params = const []]) =>
      (super.noSuchMethod(
            Invocation.method(#call, [method, params]),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#call, [method, params]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#call, [method, params]),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Stream<_i9.ConnectionStatus> heartbeat({
    Duration? interval = const Duration(seconds: 10),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#heartbeat, [], {#interval: interval}),
            returnValue: _i4.Stream<_i9.ConnectionStatus>.empty(),
          )
          as _i4.Stream<_i9.ConnectionStatus>);

  @override
  _i4.Future<void> stopHeartbeat() =>
      (super.noSuchMethod(
            Invocation.method(#stopHeartbeat, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i10.SystemInfo> getSystemInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getSystemInfo, []),
            returnValue: _i4.Future<_i10.SystemInfo>.value(
              _i8.dummyValue<_i10.SystemInfo>(
                this,
                Invocation.method(#getSystemInfo, []),
              ),
            ),
          )
          as _i4.Future<_i10.SystemInfo>);

  @override
  _i4.Future<List<_i10.Alert>> getAlerts() =>
      (super.noSuchMethod(
            Invocation.method(#getAlerts, []),
            returnValue: _i4.Future<List<_i10.Alert>>.value(<_i10.Alert>[]),
          )
          as _i4.Future<List<_i10.Alert>>);

  @override
  _i4.Future<List<_i10.Pool>> listPools() =>
      (super.noSuchMethod(
            Invocation.method(#listPools, []),
            returnValue: _i4.Future<List<_i10.Pool>>.value(<_i10.Pool>[]),
          )
          as _i4.Future<List<_i10.Pool>>);

  @override
  _i4.Future<_i10.Pool> getPool(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPool, [id]),
            returnValue: _i4.Future<_i10.Pool>.value(
              _i8.dummyValue<_i10.Pool>(
                this,
                Invocation.method(#getPool, [id]),
              ),
            ),
          )
          as _i4.Future<_i10.Pool>);

  @override
  _i4.Future<List<_i10.Dataset>> listDatasets({String? poolId}) =>
      (super.noSuchMethod(
            Invocation.method(#listDatasets, [], {#poolId: poolId}),
            returnValue: _i4.Future<List<_i10.Dataset>>.value(<_i10.Dataset>[]),
          )
          as _i4.Future<List<_i10.Dataset>>);

  @override
  _i4.Future<_i10.Dataset> getDataset(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDataset, [id]),
            returnValue: _i4.Future<_i10.Dataset>.value(
              _i8.dummyValue<_i10.Dataset>(
                this,
                Invocation.method(#getDataset, [id]),
              ),
            ),
          )
          as _i4.Future<_i10.Dataset>);

  @override
  _i4.Future<_i10.Dataset> createDataset({
    required String? pool,
    required String? name,
    Map<String, dynamic>? properties,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDataset, [], {
              #pool: pool,
              #name: name,
              #properties: properties,
            }),
            returnValue: _i4.Future<_i10.Dataset>.value(
              _i8.dummyValue<_i10.Dataset>(
                this,
                Invocation.method(#createDataset, [], {
                  #pool: pool,
                  #name: name,
                  #properties: properties,
                }),
              ),
            ),
          )
          as _i4.Future<_i10.Dataset>);

  @override
  _i4.Future<_i10.Dataset> updateDataset(
    String? id,
    Map<String, dynamic>? properties,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDataset, [id, properties]),
            returnValue: _i4.Future<_i10.Dataset>.value(
              _i8.dummyValue<_i10.Dataset>(
                this,
                Invocation.method(#updateDataset, [id, properties]),
              ),
            ),
          )
          as _i4.Future<_i10.Dataset>);

  @override
  _i4.Future<bool> deleteDataset(String? id, {bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDataset, [id], {#recursive: recursive}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i10.Share>> listShares({_i10.ShareType? type}) =>
      (super.noSuchMethod(
            Invocation.method(#listShares, [], {#type: type}),
            returnValue: _i4.Future<List<_i10.Share>>.value(<_i10.Share>[]),
          )
          as _i4.Future<List<_i10.Share>>);

  @override
  _i4.Future<_i10.Share> getShare(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getShare, [id]),
            returnValue: _i4.Future<_i10.Share>.value(
              _i8.dummyValue<_i10.Share>(
                this,
                Invocation.method(#getShare, [id]),
              ),
            ),
          )
          as _i4.Future<_i10.Share>);

  @override
  _i4.Future<_i10.Share> createShare(_i10.Share? share) =>
      (super.noSuchMethod(
            Invocation.method(#createShare, [share]),
            returnValue: _i4.Future<_i10.Share>.value(
              _i8.dummyValue<_i10.Share>(
                this,
                Invocation.method(#createShare, [share]),
              ),
            ),
          )
          as _i4.Future<_i10.Share>);

  @override
  _i4.Future<_i10.Share> updateShare(_i10.Share? share) =>
      (super.noSuchMethod(
            Invocation.method(#updateShare, [share]),
            returnValue: _i4.Future<_i10.Share>.value(
              _i8.dummyValue<_i10.Share>(
                this,
                Invocation.method(#updateShare, [share]),
              ),
            ),
          )
          as _i4.Future<_i10.Share>);

  @override
  _i4.Future<bool> deleteShare(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteShare, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i10.Disk>> listDisks() =>
      (super.noSuchMethod(
            Invocation.method(#listDisks, []),
            returnValue: _i4.Future<List<_i10.Disk>>.value(<_i10.Disk>[]),
          )
          as _i4.Future<List<_i10.Disk>>);

  @override
  _i4.Future<_i10.Disk> getDisk(String? identifier) =>
      (super.noSuchMethod(
            Invocation.method(#getDisk, [identifier]),
            returnValue: _i4.Future<_i10.Disk>.value(
              _i8.dummyValue<_i10.Disk>(
                this,
                Invocation.method(#getDisk, [identifier]),
              ),
            ),
          )
          as _i4.Future<_i10.Disk>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i5.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get sessionTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#sessionTimeout),
            returnValue: _FakeDuration_3(
              this,
              Invocation.getter(#sessionTimeout),
            ),
          )
          as Duration);

  @override
  Duration get inactivityTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#inactivityTimeout),
            returnValue: _FakeDuration_3(
              this,
              Invocation.getter(#inactivityTimeout),
            ),
          )
          as Duration);

  @override
  int get activeSessionCount =>
      (super.noSuchMethod(
            Invocation.getter(#activeSessionCount),
            returnValue: 0,
          )
          as int);

  @override
  _i4.Future<_i5.UserSession> createSession({
    required String? username,
    required _i7.ITrueNasClient? trueNasClient,
    Map<String, dynamic>? userInfo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createSession, [], {
              #username: username,
              #trueNasClient: trueNasClient,
              #userInfo: userInfo,
            }),
            returnValue: _i4.Future<_i5.UserSession>.value(
              _FakeUserSession_4(
                this,
                Invocation.method(#createSession, [], {
                  #username: username,
                  #trueNasClient: trueNasClient,
                  #userInfo: userInfo,
                }),
              ),
            ),
          )
          as _i4.Future<_i5.UserSession>);

  @override
  _i5.UserSession? getSession(String? sessionId) =>
      (super.noSuchMethod(Invocation.method(#getSession, [sessionId]))
          as _i5.UserSession?);

  @override
  _i4.Future<void> removeSession(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#removeSession, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSessionActivity(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#updateSessionActivity, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i5.SessionInfo> getActiveSessions() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveSessions, []),
            returnValue: <_i5.SessionInfo>[],
          )
          as List<_i5.SessionInfo>);
}
