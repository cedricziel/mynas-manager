// Mocks generated by Mockito 5.4.6 from annotations
// in mynas_backend/test/services/truenas_peer_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mynas_backend/interfaces/connection_manager.dart' as _i3;
import 'package:stream_channel/stream_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamChannel_0<T> extends _i1.SmartFake
    implements _i2.StreamChannel<T> {
  _FakeStreamChannel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IConnectionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectionManager extends _i1.Mock
    implements _i3.IConnectionManager {
  MockIConnectionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ConnectionState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i3.ConnectionState.disconnected,
          )
          as _i3.ConnectionState);

  @override
  _i4.Stream<_i3.ConnectionState> get stateStream =>
      (super.noSuchMethod(
            Invocation.getter(#stateStream),
            returnValue: _i4.Stream<_i3.ConnectionState>.empty(),
          )
          as _i4.Stream<_i3.ConnectionState>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i4.Stream<String> get messageStream =>
      (super.noSuchMethod(
            Invocation.getter(#messageStream),
            returnValue: _i4.Stream<String>.empty(),
          )
          as _i4.Stream<String>);

  @override
  _i4.Future<void> connect(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [uri]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setAuthHeaders(Map<String, String>? headers) => super.noSuchMethod(
    Invocation.method(#setAuthHeaders, [headers]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> send(String? data) =>
      (super.noSuchMethod(
            Invocation.method(#send, [data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i2.StreamChannel<String> getStreamChannel() =>
      (super.noSuchMethod(
            Invocation.method(#getStreamChannel, []),
            returnValue: _FakeStreamChannel_0<String>(
              this,
              Invocation.method(#getStreamChannel, []),
            ),
          )
          as _i2.StreamChannel<String>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
